import streamlit as st
import pandas as pd
from datetime import datetime
from mongodb_client import predictions_collection
from report_queries import get_avg_predicted_price, get_historical_accuracy
from predict import generate_single_prediction
from tracking_engine import update_actual_prices

st.set_page_config(
    page_title="BDA Stock Predictor Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("ðŸ“ˆ BDA Stock Predictor Dashboard")
st.caption("MongoDB-Backed Historical Prediction & Accuracy Tracking")

st.sidebar.header("Configuration & Backend")

#Ticker Selection
TICKER_OPTIONS = ["AAPL", "MSFT", "GOOGL", "AMZN"]
selected_ticker = st.sidebar.selectbox(
    "Select Stock Ticker for Reports:", 
    TICKER_OPTIONS,
    index=0 #Default AAPL
)
st.sidebar.markdown("---")
days_to_predict = st.sidebar.slider(
    "Prediction Horizon (Days Ahead):", 
    min_value=1, 
    max_value=30, 
    value=7,  # Default to 7 days
    step=1
)

#Backend Action Buttons
st.sidebar.subheader("Run Prediction Engine")
if st.sidebar.button(f"Generate & Save New Prediction for {selected_ticker}", type="primary"):
    with st.spinner(f"Generating and saving {days_to_predict}-day prediction for {selected_ticker}..."):
        result = generate_single_prediction(selected_ticker, days_to_predict) 
        if result:
            st.sidebar.success(f"Prediction for {selected_ticker} saved. Target: {result['target_date']}")
        else:
            st.sidebar.error("Prediction failed or no data found.")

st.sidebar.subheader("Run Tracking Engine")
if st.sidebar.button("Audit Past Predictions (Update Accuracy)"):
    with st.spinner("Fetching actual prices and updating error metrics in MongoDB..."):
        update_actual_prices()
        st.sidebar.info("Tracking audit complete. Check console for details.")

tab1, tab2 = st.tabs(["ðŸ“Š Prediction Reports", "ðŸ“‰ Historical Accuracy Tracking"])

with tab1:
    st.header(f"Recent Prediction Snapshot for {selected_ticker}")
    avg_report_data = get_avg_predicted_price(selected_ticker, days=30)
    
    if avg_report_data:
        data = avg_report_data[0] 
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                label="Average Predicted Price (Last 30 Days)", 
                value=f"${data['average_predicted_price']}", 
                delta=f"Based on {data['prediction_count']} predictions"
            )
            
        with col2:
            st.metric(
                label="Total Historical Records (Completed & Pending)",
                # Fetching the total count from MongoDB
                value=predictions_collection.count_documents({"ticker": selected_ticker})
            )
            
        st.caption("This report is generated by MongoDB's $match and $group aggregation pipeline.")
        
    else:
        st.info(f"No predictions found for {selected_ticker} in the last 30 days.")
    
with tab2:
    st.header("Model Performance Over Time")
    st.subheader(f"Prediction Error Trend for {selected_ticker}")
    accuracy_df = get_historical_accuracy(selected_ticker)
    
    if not accuracy_df.empty:
        avg_error = accuracy_df['Error Percentage'].mean()
        overall_accuracy = round(100 - avg_error, 2)
        
        st.metric(
            label="Overall Historical Accuracy (Average Score)", 
            value=f"{overall_accuracy}%",
            delta=f"Average Error: {round(avg_error, 2)}%"
        )
        
        st.markdown("---")
        st.line_chart(
            accuracy_df, 
            x='Date', 
            y='Error Percentage', 
            use_container_width=True
        )
        st.caption("This chart visualizes the history of prediction error, generated from completed, audited MongoDB documents.")
        st.subheader("Raw Audited Prediction Data")
        st.dataframe(accuracy_df, use_container_width=True)
        
    else:
        st.info(f"No completed accuracy tracking data found for {selected_ticker}. Run the 'Audit Past Predictions' button after predictions are past their target date.")

